block post, mod view full {

    content: {
        var source = this.data.node.source[this.data.req.prefLocale],
            node = this.data.node;

        if(!source) {
            logger.error('source not found for node %s and locale %s', this.data.node.id, this.data.req.prefLocale);
            return [];
        }

        return [

            apply('author', this.ctx = {
                authors: source.authors,
                translators: source.translators
            }),

            apply('tags', this.ctx.content = source.tags),

            apply('date', this.ctx = {
                createDate: source.createDate,
                editDate: source.editDate
            }),

            apply('categories', this.ctx = {
                breadcrumbs: this.data.node.breadcrumbs,
                lang: this.data.lang
            }),

            apply('title', this.ctx.content = source),
            apply('contentFull', this.ctx.content = source.content),
            apply('issue', this.ctx.content = source.repo),
            apply('likes', this.ctx = {
                title: source.title,
                url: node.url
            })
        ];
    }

    //authors of post
    author: {
        elem: 'author',
        authors: this.ctx.authors,
        translators: this.ctx.translators
    }

    //date of creation and last modification
    date: {
        elem: 'date',
        elemMods: { type: 'human' },
        createDate: this.ctx.createDate,
        editDate: this.ctx.editDate
    }

    //post categories
    categories: {
        elem: 'categories',
        breadcrumbs: this.ctx.breadcrumbs,
        lang: this.ctx.lang
    }

    //tags array of post
    tags: {
        if (this.ctx.content) {
            return {
                elem: 'tags',
                content: this.ctx.content
            }
        }
    }

    //post title
    title: {
        elem: 'title',
        tag: 'h1',
        content: this.ctx.content.longTitle || this.ctx.content.title
    }

    //post content
    contentFull: {
        elem: 'content',
        url: apply('getUrl'),
        content: this.ctx.content
    }

    likes: {
        block: 'likes',
        text: BEM.I18N('post', 'likes'),
        opts: {
            l10n: 'ru',
            quickServices: 'yaru,vkontakte,twitter,facebook',
            theme: 'counter',
            type: 'small',
            title: 'BEM - ' + this.ctx.title,
            link: 'http://' + this.data.req.headers.host + this.ctx.url,
            image: 'http://avatars.yandex.net/get-yaevents/fbd94638d43ccf96eb203538181f8897/150x150'
        }
    }

    issue: {
        var repo = this.ctx.content;

        if(!repo) return [];

        var issueContent = [
            {
                tag: 'span',
                content: BEM.I18N('post', 'repo-text')
            },
            {
                block: 'link',
                url: repo.issue,
                content: BEM.I18N('post', 'repo-issue')
            },
            {
                tag: 'span',
                content: BEM.I18N('post', 'repo-on-github')
            }
        ];

        issueContent = repo.type === 'public' ? issueContent.concat([
            {
                tag: 'span',
                content: BEM.I18N('post', 'repo-alternative')
            },
            {
                block: 'link',
                url: repo.prose,
                content: BEM.I18N('post', 'repo-prose')
            },
            {
                tag: 'span',
                content: BEM.I18N('post', 'repo-with-prose')
            }
        ]) : issueContent;


        return {
            elem: 'issue',
            content: issueContent
        }
    }

    getUrl: {
        var lang = this.data.req.prefLocale == 'en' ? 'ru' : 'en',
            host = this.data.req.headers.host,
            path = this.data.req._parsedUrl.pathname;

            return 'http://' + lang +
                (host.indexOf(this.data.req.prefLocale) == 0 ? host.slice(host.indexOf('.')) : ('.' + host)) + path;
    }
}

