block('block-docs')(
    content()(function() {
        var data = this.data;
            _data = data.node.source.data,
            _lang = data.lang;

        _data = _data[_lang] ? _data[_lang] : _data;
        return [
            applyNext(),
            apply('description', { ctx: { description: _data.description }}),
            apply('mods', { ctx: {mods: _data.mods }}),
            apply('elems', { ctx: {elems: _data.elems }})
        ];
    }),

    mode('description')(
        (function() {
            var buf = [],
                sign = '<!--bem-example-->',
                inlineExamples = [],
                description = this.ctx.description;

            //parse inline examples
            /*
            description = description.replace(/<!--\sbem-example:\s(\S+)\s-->/g, function(str, p1) {
                inlineExamples.push(apply('examples', {
                    ctx: {
                        examples: [{ url: p1 }],
                        source: this.data.node.source
                    }
                } ));
                return sign;
            });

            description.split(sign).forEach(function(item, index) {
                buf.push(item, inlineExamples[index]);
            });


            description = buf;
            */

            return {
                elem: 'description',
                content: description
            };
        }),

        match(function() {
            var d = this.ctx.description;
            return this.isArray(d) && d.length;
        })(function() {
            var md = this.ctx.description.filter(function(item) {
                return !item.tech || (item.tech && 'desc.md' === item.tech)
            })[0];

            this.ctx = this.extend(this.ctx, { description: md ? md.content : '' })
            return applyNext();
        }),

        match(function() {
            return !this.ctx.description;
        })(function() {
            return null;
        })
    ),

    mode('mods')(
        (function() {
            return [
                apply('mods-title'),
                this.ctx.mods.map(function(mod) {
                    return {
                        elem: 'item',
                        content: [
                            {
                                elem: 'title',
                                elemMods: { mix: 'post-title-inline', h: '6' },
                                content: {
                                    elem: 'selection',
                                    elemMods: { color: 'gold' },
                                    content: '_' + mod.name
                                }
                            },
                            {
                                elem: 'description',
                                elemMods: { inline: 'yes' },
                                content: mod.title ? mod.title[0].content : ''
                            },
                            apply('mod-values', { ctx: { values: mod.vals }})
                        ]
                    };
                })
            ];
        }),

        match(function() {
            return !this.ctx.mods || !this.ctx.mods.length;
        })(function() {
            return null;
        })
    ),

    mode('mods-title')(function() {
        return {
            elem: 'title',
            elemMods: { mix: 'post-title', h: '4' },
            content: BEM.I18N('block-docs', 'mods')
        };
    }),

    mode('mod-values')(
        (function() {
            return this.ctx.values.map(function(value){
                return [
                    {
                        elem: 'values',
                        content: [
                            {
                                elem: 'value',
                                content: value.name
                            },
                            {
                                elem: 'description',
                                elemMods: { inline: 'yes' },
                                content: value.title ? value.title[0].content : ''
                            }
                        ]
                    }
                ];
            });
        }),

        match(function() {
            return !this.ctx.values || !this.ctx.values.length;
        })(function() {
            return null;
        })
    ),

    mode('elems')(
        (function() {
            return [
                apply('elems-title'),
                this.ctx.elems.map(function(elem) {
                    return {
                        elem: 'item',
                        content: [
                            {
                                elem: 'title',
                                elemMods: { mix: 'post-title-inline', h: '6' },
                                content: {
                                    elem: 'selection',
                                    elemMods: { color: 'gold' },
                                    content: '__' + elem.name
                                }
                            },
                            {
                                elem: 'description',
                                elemMods: { inline: 'yes' },
                                content: elem.title ? elem.title[0].content : ''
                            },
                            apply('elem-mods', { ctx: { eMods: elem.mods }})
                        ]
                    };
                })
            ];
        }),

        match(function() {
            return !this.ctx.elems || !this.ctx.elems.length;
        })(function() {
            return null;
        })
    ),

    mode('elems-title')(function() {
        return {
            elem: 'title',
            elemMods: { mix: 'post-title', h: '4' },
            content: BEM.I18N('block-docs', 'elems')
        };
    }),

    mode('elem-mods')(
        (function() {
            return this.ctx.eMods.map(function(eMod){
                return [
                    {
                        elem: 'values',
                        mix: [{ elem: 'sublevel' }],
                        content: [
                            {
                                elem: 'title',
                                elemMods: { mix: 'post-title-inline', h: '6' },
                                content: {
                                    elem: 'selection',
                                    elemMods: { color: 'gold' },
                                    content: '_' + eMod.name
                                }
                            },
                            {
                                elem: 'description',
                                elemMods: { inline: 'yes' },
                                content: eMod.title ? eMod.title[0].content : ''
                            },
                            apply('elem-mod-values', { ctx: { values: eMod.vals }})
                        ]
                    }
                ];
            });
        }),

        match(function() {
            return !this.ctx.eMods || !this.ctx.eMods.length;
        })(function() {
            return null;
        })
    ),

    mode('elem-mod-values')(
        (function() {
            return this.ctx.values.map(function(value){
                return [
                    {
                        elem: 'values',
                        content: [
                            {
                                elem: 'value',
                                content: value.name
                            },
                            {
                                elem: 'description',
                                elemMods: { inline: 'yes' },
                                content: value.title ? value.title[0].content : ''
                            }
                        ]
                    }
                ];
            });
        }),

        match(function() {
            return !this.ctx.values || !this.ctx.values.length;
        })(function() {
            return null;
        })
    ),

    mode('examples')(
        (function() {
            var s = this.ctx.source;
            return this.ctx.examples.map(function(example) {
                return [
                    {
                        block: 'block-example',
                        enb: s.enb,
                        prefix: s.prefix,
                        example: example
                    }
                ];
            });
        }),

        match(function() {
            return !this.ctx.examples || !this.ctx.examples.length;
        })(function() {
            return null;
        })
    )
)
