block block {

    content: {

        var node = this.data.node,
            lang = this.data.lang,
            _source = node.source;

        return [
            apply('contents', this.ctx = {
                source: _source,
                node: node,
                lang: lang
            })
        ];
    }

    contents: {

        var tabsHeader = [],
            tabsContent = [];

        if(this.ctx.source.data) {
            tabsHeader.push({
                elem: 'tab',
                attrs: { 'data-tab': 'docs' },
                mods: { 'side': 'left' },
                content: BEM.I18N('block', 'docs')
            });

            tabsContent.push({
                elem: 'pane',
                content: [
                    {
                        block: this.block,
                        elem: 'title',
                        content: BEM.I18N('block', 'static-title') + ' ' + this.ctx.node.title[this.ctx.lang]
                    },
                    {
                        block: 'block-docs',
                        mix: { block: 'post', elem: 'content' }
                    }
                ]
            });
        }

        if(this.ctx.source.jsdoc) {
            tabsHeader.push({
                elem: 'tab',
                attrs: { 'data-tab': 'jsdoc' },
                content: BEM.I18N('block', 'jsdoc')
            });

            tabsContent.push({
                elem: 'pane',
                content: {
                    block: 'block-jsdoc',
                    mix: { block: 'post', elem: 'content' }
                }
            });
        }

        if(this.ctx.source.data && this.ctx.source.data.examples && this.ctx.source.data.examples[0].content.length > 0) {
            tabsHeader.push({
                elem: 'tab',
                attrs: { 'data-tab': 'examples' },
                mods: { 'side': 'right', 'examples': 'yes' },
                content: BEM.I18N('block', 'examples')
            });

            tabsContent.push({
                elem: 'pane',
                content: apply('examples-items')
            });
        }

        return {
            block: 'tabs',
            mods: { theme: 'default' },
            content: [
                {
                    elem: 'header',
                    content: tabsHeader
                },
                {
                    elem: 'content',
                    content: tabsContent
                }
            ]
        }
    }

    examples-items: {

        if(this.ctx.source.data.examples && this.ctx.source.data.examples.length > 0) {

            var prefix = this.ctx.source.prefix;

            return this.ctx.source.data.examples[0].content.map(function(example) {
                var exampleUrl = prefix + '/' + example.url + '.ru.html',
                    bemjson = prefix + '/' + example.url + '.bemjson.js',
                    exampleName = example.url.replace(/.+\//, '');

                return [
                    {
                        block: 'block-example',
                        js: {
                            bemjsonUrl: bemjson,
                            copyHoverClass: 'source-copy-hover'
                        },
                        content: [
                            {
                                elem: 'header',
                                content: [
                                    {
                                        block: 'link',
                                        url: exampleUrl,
                                        attrs: { target: '_blank' },
                                        mix: [{ block: 'block-example', elem: 'link', elemMods: { icon: 'blank' } }],
                                        content: example.title + ' (' + exampleName + ')'
                                    },
                                    {
                                        block: 'link',
                                        url: '#',
                                        mix: [
                                            { block: 'block-example', elem: 'link', elemMods: { icon: 'source' } },
                                            { block: 'block-example', elem: 'source-link' }
                                        ],
                                        content: 'BEMJSON'
                                    }
                                ]
                            },
                            {
                                elem: 'source',
                                content: [
                                    {
                                        elem: 'source-code',
                                        attrs: { 'data-url': bemjson }
                                    },
                                    {
                                        block: 'link',
                                        mods: { type: 'block' },
                                        mix: [{ block: 'block-example', elem: 'source-copy' }],
                                        content: BEM.I18N('block-example', 'copy')
                                    }
                                ]
                            },
                            {
                                elem: 'live',
                                attrs: { 'data-url': exampleUrl }
                            }
                        ]
                    }
                ]
            })
        }
    }

}
