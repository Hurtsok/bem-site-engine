block('block-jsdoc')(
    content()(
        (function() {
            var jsdoc = this.data.node.source.jsdoc;

            return [
                apply('description', { ctx: { description: jsdoc.description }}),
                apply('methods', { ctx: { methods: jsdoc.methods }}),
                apply('events', { ctx: { events: jsdoc.events }})
            ];
        }),

        match(function() {
            return 'string' === typeof this.data.node.source.jsdoc;
        })(function() {
            return this.data.node.source.jsdoc;
        })
    ),

    mode('description')(function() {
        return {
            elem: 'description',
            content: this.ctx.description
        };
    }),

    mode('methods-title')(function() {
        return {
            elem: 'title',
            tag: 'h2',
            mix: [{ block: 'post', elem: 'title' }],
            content: BEM.I18N('block-jsdoc', 'methods-title')
        };
    }),

    mode('events-title')(function() {
        return {
            elem: 'title',
            tag: 'h2',
            mix: [{ block: 'post', elem: 'title' }],
            content: BEM.I18N('block-jsdoc', 'events-title')
        };
    }),

    mode('methods')(
        (function() {
            return [
                apply('methods-title'),
                this.ctx.methods.map(function(method) {
                    return {
                        elem: 'item',
                        content: [
                            {
                                elem: 'title',
                                mix: [{ block: 'post', elem: 'title', elemMods: { inline: 'yes' } }],
                                tag: 'h5',
                                content: {
                                    elem: 'selection',
                                    elemMods: { color: 'gold' },
                                    content: method.name + '()'
                                }
                            },
                            {
                                elem: 'access',
                                content: method.access
                            },
                            {
                                elem: 'description',
                                content: method.description
                            },
                            apply('method-params', { ctx: { method: method }}),
                            apply('method-returns', { ctx: { method: method }})
                        ]
                    };
                })
            ];
        }),

        match(function() {
            var methods = this.ctx.methods;
            return !methods || !methods.length;
        })(function() {
            return false;
        })
    ),

    mode('method-params')(
        (function() {
            return [
                {
                    elem: 'title',
                    mix: [{ block: 'post', elem: 'title' }],
                    tag: 'h6',
                    content: BEM.I18N('block-jsdoc', 'params') + ':'
                },
                this.ctx.method.params.map(function(param) {
                    return [
                        {
                            elem: 'value',
                            mix: [{ elem: 'selection', elemMods: { color: 'grey' } }],
                            content: param.name
                        },
                        apply('method-params-type', { ctx: { param: param }}),
                        {
                            elem: 'js-description',
                            content: param.description
                        }
                    ];
                })
            ];
        }),

        match(function() {
            var params = this.ctx.method.params;
            return !params || !params.length;
        })(function() {
            return false;
        })
    ),

    mode('method-params-type')(
        (function() {
            return this.ctx.param.types.map(function(type){
                return {
                    elem: 'type',
                    content: '<code>' + type + '</code>'
                };
            });
        }),

        match(function() {
            var types = this.ctx.param.types;
            return !types || !types.length;
        })(function() {
            return false;
        })
    ),

    mode('method-returns')(
        (function() {
            return [
                {
                    elem: 'title',
                    mix: [{ block: 'post', elem: 'title', elemMods: { inline: 'yes' } }],
                    tag: 'h6',
                    content: BEM.I18N('block-jsdoc', 'returns') + ':'
                },
                this.ctx.method.returns.map(function(returns) {
                    return [
                        {
                            elem: 'types',
                            content: returns.types.map(function(type) {
                                return {
                                    elem: 'type',
                                    content: '<code>' + type + '</code>'
                                };
                            })
                        },
                        {
                            elem: 'description',
                            content: returns.description
                        }
                    ];
                })
            ];
        }),

        match(function() {
            var returns = this.ctx.method.returns;
            return !returns || !returns.length;
        })(function() {
            return false;
        })
    ),

    mode('events')(
        (function() {
            return [
                apply('events-title'),
                this.ctx.events.map(function(event) {
                    return {
                        elem: 'item',
                        content: [
                            {
                                elem: 'title',
                                mix: [{ block: 'post', elem: 'title' }],
                                tag: 'h5',
                                content: {
                                    elem: 'selection',
                                    elemMods: { color: 'gold' },
                                    content: event.name
                                }
                            },
                            {
                                elem: 'description',
                                content: event.description
                            },
                            apply('event-params', { ctx: { event: event }})
                        ]
                    };
                })
            ];
        }),

        match(function() {
            var events = this.ctx.events;
            return !events || !events.length;
        })(function() {
            return false;
        })
    ),

    mode('event-params')(
        (function() {
            return [
                {
                    elem: 'title',
                    mix: [{ block: 'post', elem: 'title' }],
                    tag: 'h6',
                    content: BEM.I18N('block-jsdoc', 'params') + ':'
                },
                this.ctx.event.params.map(function(param) {
                    return [
                        {
                            elem: 'value',
                            mix: [{ elem: 'selection', elemMods: { color: 'grey' } }],
                            content: param.name
                        },
                        param.types.map(function(type){
                            return {
                                elem: 'type',
                                content: '<code>' + type + '</code>'
                            };
                        }),
                        {
                            elem: 'js-description',
                            content: param.description
                        }
                    ];
                })
            ]
        }),

        match(function() {
            var params = this.ctx.event.params;
            return !params || !params.length;
        })(function() { return false; })
    )
)
