block b-page {

    default: {
        return applyCtx({
            block : this.block,
            title : apply('title'),
            mods : this.ctx.mods,
            head : apply('head'),
            content : this.ctx.content
        });
    }

    title: {
        return this.data.pageTitle;
    }

    head: {
        var c = [],
            _m = this.data._m;


        c.push({ elem : 'css' });
        //c.push({ elem : 'js' });

        if(_m) {
            if(_m.description)
                c.push({ elem: 'meta', attrs: { name: 'description', content: _m.description }});

            if(_m.keywords)
                c.push({ elem: 'meta', attrs: { name: 'keywords', content: _m.keywords }});

            if(_m.ogTitle)
                c.push({ elem: 'meta', attrs: { property: 'og:title', content: _m.ogTitle }});

            if(_m.ogDescription)
                c.push({ elem: 'meta', attrs: { property: 'og:description', content: _m.ogDescription }});

            if(_m.ogType)
                c.push({ elem: 'meta', attrs: { property: 'og:type', content: _m.ogType }});

            if(_m.ogKeywords)
                c.push({ elem: 'meta', attrs: { property: 'og:article:tag', content: _m.ogKeywords }});

            if(_m.ogUrl)
                c.push({ elem: 'meta', attrs: { property: 'og:url', content: _m.ogUrl }});

            if(_m.ogImage)
                c.push({ elem: 'meta', attrs: { property: 'og:image', content: _m.ogImage }});

        }

        return applyCtx(c);
    }

    asset, this.elem !== '': {
        prefix : [this.data.staticUrl, '_', this.data.bundleName].join(''),
        suffix : this.ctx.ext
    }

}

block b-page {

    !leJspath.getSource(), default: {
        leJspath.setSource(datasrc); //кеширование данных
        return applyNext();
    }

    leJspath.getSource(), default: {
        apply('route');
        this.ctx.mods = this._.extend({ theme : 'normal', page : this.data.page }, this.ctx.mods);
        return applyCtx(this.ctx);
    }

    (leJspath.getSource() && this.data.page === 'custom'), default: {
        var data = this.data,
            entity = leJspath.findCategoryAndIdByManualUrl(data.req.path, data.lang);
        if(entity) {
            data.req.path = entity.url;
            data.page = this._.isArray(entity.type) ? entity.type[0] : entity.type;
        }else {
            data.page = 'error';
            this.data.res.statusCode = 404;
            data._q = { error: { state: true, code: 404 } };
        }
        this.data = data;
        return applyNext();
    }

    route: {

        this.data._r = {
            'method':           function() { return apply('method') },
            'libs':             function() { return apply('libs') },
            'articles':         function() { return apply('articles') },
            'tools':            function() { return apply('tools') },
            'news':             function() { return apply('news') },
            'jobs':             function() { return apply('page') },
            'acknowledgement':  function() { return apply('page') },
            'authors':          function() { return apply('authors') },
            'tags':             function() { return apply('tags') },
            'index':            function() { return apply('index') },
            'error':            function() { return apply('error') }
        };
        return this.data._r[this.data.page].call(this);
    }

    index: {
        return apply('setTitleAndMeta', this.ctx = {
            title: apply('buildTitle', this.ctx.content = [BEM.I18N('main-menu', 'general')])
        });
    }

    error: {
        return apply('setTitleAndMeta', this.ctx = {
            title: apply('buildTitle', this.ctx.content = [BEM.I18N('p-error', 'title')])
        });
    }

    method: {
        this.data._q = leLogic.resolveMethodology(this.data);
        return apply('createSEO')
    }

    libs: {
        this.data._q = leLogic.resolveLibraries(this.data);
        return apply('createSEO');
    }

    articles: {
        this.data._q = leLogic.resolveArticles(this.data);
        return apply('createSEO');
    }

    tools: {
        this.data._q = leLogic.resolveTools(this.data);
        return apply('createSEO');
    }

    news: {
        this.data._q = leLogic.resolveNews(this.data);
        return apply('createSEO');
    }

    page: {
        this.data._q = leLogic.resolveCustomPage(this.data);
        return apply('createSEO');
    }

    authors: {
        var data = this.data,
            slug = data.params.id,
            title = null,
            description = null;

        description = title = apply('buildTitle', this.ctx.content = [BEM.I18N('main-menu', 'authors')]);

        if(slug) {
            var source = leJspath.findBySlug(slug, data.lang);
            if(source) {
                title = apply('buildTitle', this.ctx.content = [source.firstName + ' ' + source.lastName, BEM.I18N('main-menu', 'authors')]);
                description = source.info;
            }else {
                this.data.page = 'error';
                this.data.res.statusCode = 404;
                this.data._q = { error: { state: true, code: 404 } };
                return apply('route');
            }
        }

        return apply('setTitleAndMeta', this.ctx = { title: title, description: description });
    }

    tags: {
        var tag = this.data.params.id,
            title = apply('buildTitle', this.ctx.content = [tag, BEM.I18N('main-menu', 'tags')]);

        return apply('setTitleAndMeta', this.ctx = { title:  title, description: title });
    }

    buildTitle: {
        return this.ctx.content.reduce(function(prev, item) {
            return item ? prev + item + ' / ' : '';
        }, '') + 'BEM';
    }

    /**
     * Мода для определения заголовка страницы и мета-информации
     * При отображении конкретного поста заголовком страницы будет название этого поста
     * В мета-информацию попадет краткое содержание (summary) и теги (tags) поста
     * Применяется для страниц:
     * - method
     * - articles
     * - news
     * - tools
     * - libs
     */
    createSEO: {
        var _q = this.data._q,
            title = null,
            description = null,
            keywords = null,
            image = null;

        if(_q.type) {
            description = title = apply('buildTitle', this.ctx.content = [BEM.I18N('main-menu', this.data.page)]);

            if(_q.id) {
                var source = leJspath.findByIdAndType(_q.id, _q.type, this.data.lang);
                if(source) {
                    title = apply('buildTitle', this.ctx.content = [source.title, BEM.I18N('main-menu', this.data.page)]);
                    description = source.summary;
                    keywords = source.tags ? source.tags.join(', ') : '';

                    if(source.ogImage && source.ogImage.length > 0) {
                        image = source.ogImage;
                    }

                    if(!image && source.thumbnail && source.thumbnail.length > 0) {
                        image = source.thumbnail
                    }
                }
            }
        }

        return apply('setTitleAndMeta', this.ctx = {
            title: title,
            description: description,
            keywords: keywords,
            image: image
        });

    }

    this.data._q.error, createSEO: {
        this.data.page = 'error';
        this.data.res.statusCode = 404;
        return apply('error');
    }

    /**
     * Мода для задания заголовка страницы и мета-информации
     * Заголовок страницы хранится в поле pageTitle глобального объекта this.data
     * Вся мета-информация хранится в специальном объекте this.data._m
     */
    setTitleAndMeta: {
        this.data._m = {};

        this.data._m['ogType'] = 'article';
        this.data._m['ogUrl'] = 'http://' + this.data.req.headers.host + this.data.req.path;

        if(this.ctx.title) {
            this.data._m['ogTitle'] = this.data.pageTitle = this.ctx.title;
        }

        if(this.ctx.description) {
            this.data._m['ogDescription'] = this.data._m['description'] = this.ctx.description;
        }

        if(this.ctx.keywords) {
            this.data._m['keywords'] = this.data._m['ogKeywords'] = this.ctx.keywords;
        }

        if(this.ctx.image) {
            this.data._m['ogImage'] = this.ctx.image;
        }
    }

    content: [
        { block : 'content' },
        { block : 'metrika' },
        { elem : 'js' }
    ]

}
