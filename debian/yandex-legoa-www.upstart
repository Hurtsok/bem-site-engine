description "upstart configuration for legoa front-end"
author "Vladimir Varankin <varankinv@yandex-team.ru> (http://staff/varankinv)"
version "1.0.0"

env YENV=production
env YENV_FILE=/etc/yandex/environment.type

env DAEMON=node
env DAEMON_OWN=www-data
env DAEMON_DEFAULTS=/etc/default/yandex-legoa-www
env DAEMON_PID=/var/run/yandex/legoa/legoa.pid
env DAEMON_LOG=/var/log/yandex/legoa/nodejs-upstart.log
env DAEMON_PORT=""  #example: "12345", если указать порт, то при стопе будет сначала закрывать его в фаерволе;

env APP_ROOT=/usr/lib/yandex/legoa
env APP_FILE=""

start on filesystem or runlevel [2345]
stop on runlevel [06]

#respawn

# настройки stdout,stderr,stdin http://upstart.ubuntu.com/cookbook/#console
# если опция не активирована по умолчанию считается console none
#console none   #- stdin,stder,stdout -> /dev/null
#console log    #- stdin -> /dev/null, stder,stdout -> /var/log/upstart/
#console output #- stdin,stder,stdout -> /dev/console

# upstart pid контролирует собственными силами http://upstart.ubuntu.com/cookbook/#expect
# У него есть 3 режима отслеживания PID процесса:
#  expect        #- закомментирован, приложение берёт первый пид который получает после команды exec
#  expect fork   #- upstart ждёт первого fork приложения и считает это главным пидом
#  expect daemon #- upstart ждёт 2 fork_ов от приложения и второй pid считает главным.

script
    # обновляем переменные окружения DAEMON, APP_ROOT, APP_FILE, и тд
    if [ -f "$DAEMON_DEFAULTS" ]; then
        . $DAEMON_DEFAULTS
    fi

    if ! which "$DAEMON"; then
        echo "node executable not found \"$DAEMON\""
        stop
        exit 1
    fi

    appfile=$APP_ROOT/$APP_FILE
    if [ ! -f "$appfile" ]; then
        echo "app file not found \"$appfile"\"
        stop
        exit 1
    fi

    [ -f "$YENV_FILE" ] && YENV=`cat "$YENV_FILE"`

    [ -n "$YENV" ] && \
        DAEMON="/usr/bin/env NODE_ENV=$YENV $DAEMON"

    exec start-stop-daemon --start \
        --make-pidfile --pidfile $DAEMON_PID --chuid $DAEMON_OWN --chdir $APP_ROOT \
        --exec $DAEMON -- $appfile >> $DAEMON_LOG 2>&1
end script

pre-start script
    log_dir=`dirname $DAEMON_LOG`
    pid_dir=`dirname $DAEMON_PID`

    if [ ! -d "$log_dir" ]; then
        mkdir -p $log_dir
        chown -R $DAEMON_OWN $log_dir
    fi

    # пишем в лог приложения сообщения системы, в формате `new Date().toString()`
    echo "[`LC_ALL=en_US date \"+%a %b %d %Y %T GMT%z (%Z)\"`] SYSTEM Starting" >> $DAEMON_LOG

    if [ -f "$DAEMON_DEFAULTS" ]; then
        . $DAEMON_DEFAULTS
    fi

    if [ -f /etc/yandex/legoa/ulimit.conf ]; then
        . /etc/yandex/legoa/ulimit.conf
    fi

    mkdir -p $pid_dir
    chown -R $DAEMON_OWN $pid_dir

    if [ -f "$DAEMON_PID" ]; then
        pid=`cat $DAEMON_PID`
        if `ps aux | grep $pid | grep -v grep>/dev/null`; then
            echo "$DAEMON ($DAEMON_PID) already start"
            exit 1
        else
            rm -f $DAEMON_PID
        fi
    fi

    # открыаем фаервол, если DAEMON_PORT переменная установлена
    if [ ! -z "$DAEMON_PORT" ]; then
        /usr/sbin/iptruler $DAEMON_PORT up
    fi
end script

pre-stop script
    echo "[`LC_ALL=en_US date \"+%a %b %d %Y %T GMT%z (%Z)\"`] SYSTEM Stoping" >> $DAEMON_LOG

    # закрываем фаервол и ждём 5 секунд, если DAEMON_PORT переменная установлена
    if [ ! -z "$DAEMON_PORT" ]; then
        /usr/sbin/iptruler $DAEMON_PORT down
        sleep 5
    fi
end script

post-stop script
    [ -f "$DAEMON_PID" ] && rm -f $DAEMON_PID
end script

