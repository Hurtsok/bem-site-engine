block p-method {

    content: {
        var CATEGORY_MAX_DEPTH = 2,
            TYPE = 'method';

        var data = this.data, //объект, хранящий всю информацию о request, response и.т.д.
            params = data.params, //хэш с параметрами запроса
            category = null, //категория поста
            id = null, //id конкретного поста
            isIdFounded = false;

        //Итерируемся по параметрам запроса справа в лево
        //на каждом шаге пытаемся определить что часть отделенная / это
        //id поста. Если это так, то оставшиеся части образуют категорию поста.
        //Если нет, то часть отделенная / добавляется в пассив частей из которых складывается категория
        for(var i = CATEGORY_MAX_DEPTH + 1; i > 0; i--) {
            if(params[i]) {
                if(!isIdFounded && leJspath.isExist(data.source, params[i], TYPE, data.lang)) {
                    isIdFounded = true;
                    id = params[i];
                }else {
                    category = category || [];
                    category.push(params[i]);
                }
            }
        }

        //при наличии массива из частей категорий строим категорию
        //как строку, полученную из развернутого в обратном порядке массива
        //элементы которого соединены через /
        category = category && category.reverse().join('/');

        var articlesQuery = null,
            rootId = leJspath.findRootPostId(data.source, TYPE, data.lang);

        //если id статьи методологии не был передан, то пытаемся найти корневую статью
        id = id || rootId;

        //в меню статей отображаем все посты
        //TODO сделать так чтобы не отображался корневой пост !!!
        articlesQuery = {
            predicate: '.' + data.lang + '{.type === $type}{.id !== $rootId}',
            substitution: { type: TYPE, rootId: rootId }
        };

        return [
            {
                block: 'layout',
                mods: { section: 'p-menu' },
                content: [
                    {
                        block: 'g-posts-menu',
                        config: {
                            type: TYPE,
                            query: articlesQuery,
                            category: category,
                            id: id
                        }
                    },
                    id  ?
                            {
                                block: 'g-post',
                                id: id
                            }
                        :
                            {
                                block: 'g-posts',
                                config: {
                                    query: articlesQuery
                                }
                            }
                ]
            }
        ];
    }
}
