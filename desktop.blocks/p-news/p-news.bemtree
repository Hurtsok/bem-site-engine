block p-news {

    content: {
        var CATEGORY_MAX_DEPTH = 3,
            TYPE = 'news';

        var data = this.data, //объект, хранящий всю информацию о request, response и.т.д.
            params = data.params, //хэш с параметрами запроса
            category = null, //категория поста
            id = null, //id конкретного поста
            isIdFounded = false;

        for(var i = CATEGORY_MAX_DEPTH + 1; i > 0; i--) {
            if(params[i]) {
                if(!isIdFounded && apply('find-by-id', this.ctx = { id: params[i], type: TYPE })) {
                    isIdFounded = true;
                    id = params[i];
                }else {
                    category = category || [];
                    category.push(params[i]);
                }
            }
        }

        category = category && category.reverse().join('/');

        console.debug('id = %s category = %s', id, category);

        var articlesQuery = category ?
            {
                predicate: '.' + data.lang + '{.type === $type}{.categories === $category || .categories.url === $category}.id',
                substitution: { type: TYPE, category: category }
            } :
            {
                 predicate: '.' + data.lang + '{.type === $type}.id',
                 substitution: { type: TYPE }
            };

        //блок колонки для меню категорий
        var categoriesMenu = {
            block: 'left',
            mix: { block : 'layout', elem : 'col', mods: {type: 'left', fixed: 'yes'} },
            content: [
                {
                    block: 'menu',
                    type: TYPE,
                    id: category,
                    mods: { type: 'categories' }
                }
            ]
        };

        //блок колонки для меню постов
        var articlesMenu = {
            block: 'left',
            mix: { block : 'layout', elem : 'col', mods: {type: 'left', fixed: 'yes'} },
            content: [
                {
                    block: 'menu',
                    type: TYPE,
                    query: articlesQuery,
                    category: category,
                    id: id,
                    mods: { type: 'articles' }
                }
            ]
        };

        //блок для отображения списка постов
        var posts = {
            block: 'center',
            mix: { block : 'layout', elem : 'col', mods: {type: 'center'} },
            content: [
                {
                    block: 'posts',
                    mods: { view: 'articles' },
                    config: {
                        query: articlesQuery,
                        sort: leJspath.parseQuery(this.data, 'sort')
                    }
                }
            ]
        };

        //блок для отображения поста в развернутом виде
        var post = {
            block: 'center',
            mix: { block : 'layout', elem : 'col', mods: {type: 'center'} },
            content: [
                {
                    block: 'post',
                    mods: { view: 'full' },
                    id: id
                }
            ]
        };

        return [
            {
                block: 'layout',
                mods: {section: 'p-menu'},
                content: [
                    categoriesMenu,
                    {
                        block: 'center',
                        mix: { block : 'layout', elem : 'col', mods: { type: 'center' } },
                        content: [
                            {
                               block: 'layout',
                                mods: { section: 'p-menu' },
                                content: [
                                    articlesMenu,
                                    id ? post : posts
                                ]
                            }
                        ]
                    }
                ]
            }
        ];
    }

    find-by-id: {
        return leJspath.filter(this.data.source, [
            { field: 'type', operand:  '===', value: this.ctx.type },
            { field: 'id', operand:  '===', value: this.ctx.id }
        ], this.data.lang).length > 0;
    }

    // filter: {
    //     var data = this.data,
    //         source = data.source,
    //         type = data.params.type ? data.params.type : data.page, //параметр типа
    //         url = data.req.url, //строка запроса

    //         filterConfig = [{ field: 'type', operand: '===', value: type }],
    //         filterDate = apply('date-filter', this.ctx = url);

    //     if(filterDate.dateFrom && filterDate.dateTo) {
    //         filterConfig.push(
    //             { field: 'createDate', operand: '>=', value: filterDate.dateFrom },
    //             { field: 'createDate', operand: '<', value: filterDate.dateTo }
    //         );
    //     }

    //     url = filterDate.url.split('/').slice(2); //отрезаем /{type}/

    //     return filterConfig;
    // }

    // date-filter: {
    //     var YEAR_REGEXP = /[2][0-9]{3}/;
    //         MONTH_REGEXP = /([2][0-9]{3})\/([0][1-9]|[1][0-2])/;
    //         DAY_REGEXP = /([2][0-9]{3})\/([0][1-9]|[1][0-2])\/([0][0-9]|[1-2][0-9]|[3][0-1])/;

    //     var url = this.ctx,
    //         date = null,
    //         match = null,
    //         dateFrom = null,
    //         dateTo = null;

    //     //находим число, месяц и день
    //     match = DAY_REGEXP.exec(url);
    //     if(match) {
    //         date = match[0].split('/');

    //         dateFrom = (new Date(date[0], date[1] - 1, date[2])).getTime();
    //         dateTo = dateFrom + 86400000;

    //         url = url.replace(DAY_REGEXP, '');
    //     }

    //     //находим число и месяц
    //     match = MONTH_REGEXP.exec(url);
    //     if(match) {
    //         date = match[0].split('/');

    //         dateFrom = (new Date(date[0], date[1] - 1, 1)).getTime();
    //         dateTo = date[1] < 12 ? (new Date(date[0], date[1], 1)).getTime() : (new Date(+date[0] + 1, 0, 1)).getTime();

    //         url = url.replace(MONTH_REGEXP, '');
    //     }

    //     //находим год
    //     match = YEAR_REGEXP.exec(url);
    //     if(match) {
    //         year = match[0];

    //         dateFrom = (new Date(year, 0, 1)).getTime();
    //         dateTo = (new Date(+year + 1, 0, 1)).getTime();

    //         url = url.replace(YEAR_REGEXP, '');
    //     }

    //     return { dateFrom: dateFrom, dateTo: dateTo, url: url };
    // }
}
