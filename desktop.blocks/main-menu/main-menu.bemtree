block main-menu {

    content: [
        apply('logobem'),
        apply('mainItem', this.ctx.name = 'method'),
        apply('mainItem', this.ctx.name = 'tools'),
        apply('mainItem', this.ctx.name = 'libs', this.ctx.url = apply('libUrl')),

        apply('delimeter'),

        apply('mainItem', this.ctx.name = 'articles'),
        apply('mainItem', this.ctx.name = 'news'),
        apply('mainItem', this.ctx.name = 'tags'),
        apply('mainItem', this.ctx.name = 'authors'),
        apply('mainItem', this.ctx.name = 'jobs', this.ctx.url = 'page/jobs'),

        apply('delimeter'),

        this.data.lang == 'ru' ?
        apply('social', this.ctx.name = 'yaru') : null,
        apply('social', this.ctx.name = 'facebook'),
        apply('social', this.ctx.name = 'twitter'),

        {
            elem: 'item',
            elemMods: { size: 'small' },
            url: apply('disable', this.ctx.url = '/page/acknowledgement'),
            name: 'acknowledgements'
        },

        apply('delimeter'),

        apply('langSwitcher'),
        { block: 'search' }
    ]

    //логотип сайта
    logobem: {
        block: 'logobem',
        url: 'http://' + this.data.req.headers.host
    }

    //основной пункт меню
    mainItem: {
        elem: 'item',
        elemMods: {
            size: 'normal',
            active: apply('active', this.ctx = this.ctx.name)
        },
        url: apply('disable', this.ctx.url = '/' + (this.ctx.url || this.ctx.name)),
        name: this.ctx.name
    }

    //ссылка на социальные ресурсы
    social: {
        var urls = {
            facebook: 'http://www.facebook.com/#!/groups/209713935765634/',
            twitter: 'https://twitter.com/bem_' + this.data.lang,
            yaru: 'http://clubs.ya.ru/bem/'
        };

        return {
            elem: 'item',
            elemMods: { size: 'small' },
            url: urls[this.ctx.name],
            name: this.ctx.name
        };
    }

    //Разделитель
    delimeter: {
        elem: 'item',
        elemMods: {type: 'delimeter'}
    }

    //переключатель языков
    langSwitcher: {
        var lang = this.data.lang == 'en' ? 'ru' : 'en',
            host = this.data.req.headers.host,
            url = 'http://' + lang + host.slice(host.indexOf('.')) + this.data.req.path;

        return {
            elem: 'item',
            elemMods: {
                size: 'small',
                type: 'lang-switch'
            },
            url: url,
            name: 'lang'
        };
    }

    //определение условия некликабельности пункта главного меню
    disable: {
        return this.data.req.path === this.ctx.url ? null : this.ctx.url;
    }

    //определение условия активности пункта главного меню
    active: {
        return this.data.page === this.ctx ? 'yes' : '';
    }

    //построение ссылки на последнюю версию первой библиотеки из списка библиотек
    libUrl: {
        var TYPE = 'libs',
            categories = leJspath.find('.' + this.data.lang + '{.type === $type}.categories', { type : TYPE }),
            result = TYPE;

        if(this._.isArray(categories) && categories.length > 0) {
            var url = categories[0].url || categories[0],
                lib = url.split('/')[0],
                versions = [],
                version = null;

            leJspath.find('.' + this.data.lang + '{.type === $type}' +
                '{.categories ^== $category || .categories.url ^== $category }', {type: TYPE, category: lib })
                .forEach(function(post) {
                    post.categories.forEach(function(item){
                        var url = item.url || item;
                        /\d+\.\d+\.\d+/.test(url) && versions.push(url.match(/\d+\.\d+\.\d+/)[0]);
                    });
                });

            version = versions.sort().pop();

            if(lib)
                result += '/' + lib;

            if(version)
                result += '/' + version;
        }

        return result;
    }
}
