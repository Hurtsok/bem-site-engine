block p-libraries {

    content: {
        var CATEGORY_MAX_DEPTH = 3,
            TYPE = 'libs';

        var data = this.data, //объект, хранящий всю информацию о request, response и.т.д.
            params = data.params, //хэш с параметрами запроса
            category = null, //категория поста
            id = null, //id конкретного поста
            isIdFounded = false;

        //Итерируемся по параметрам запроса справа в лево
        //на каждом шаге пытаемся определить что часть отделенная / это
        //id поста. Если это так, то оставшиеся части образуют категорию поста.
        //Если нет, то часть отделенная / добавляется в пассив частей из которых складывается категория
        for(var i = CATEGORY_MAX_DEPTH + 1; i > 0; i--) {
            if(params[i]) {
                if(!isIdFounded && leJspath.isExist(data.source, params[i], TYPE, data.lang)) {
                    isIdFounded = true;
                    id = params[i];
                }else {
                    category = category || [];
                    category.push(params[i]);
                }
            }
        }

        //разворачиваем массив частей для категории поста в обратном порядке
        //и соединяем их по /
        category = category && category.reverse().join('/');

        var predicate = '.' + data.lang + '{.type === $type}',
            substitution = { type: TYPE },
            articlesQuery = {};

        if(category) {
            if(!id) {
                id = leJspath.findRootPostIdByCategory(data.source, TYPE, category, data.lang);
            }
        }

        articlesQuery = { predicate: predicate, substitution: substitution };

        console.debug('category = %s id = %s', category, id);

        return [
            {
                block: 'center',
                mix: { block : 'layout', elem : 'col', mods: { type: 'center' } },
                content: [
                    {
                       block: 'layout',
                        mods: { section: 'p-menu' },
                        content: [
                            {
                                block: 'g-posts-menu',
                                mods: { type: 'mixed' },
                                type: TYPE,
                                query: articlesQuery,
                                category: category,
                                id: id
                            },
                            id  ?
                                    {
                                        block: 'g-post',
                                        id: id
                                    }
                                :
                                    {
                                        block: 'g-posts',
                                        query: articlesQuery
                                    }
                        ]
                    }
                ]
            }
        ];
    }
}
