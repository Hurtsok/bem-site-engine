block p-libraries {

    content: {
        var CATEGORY_MAX_DEPTH = 3,
            TYPE = 'libs';

        var data = this.data, //объект, хранящий всю информацию о request, response и.т.д.
            params = data.params, //хэш с параметрами запроса
            category = null, //категория поста
            id = null, //id конкретного поста
            isIdFounded = false;

        //Итерируемся по параметрам запроса справа в лево
        //на каждом шаге пытаемся определить что часть отделенная / это
        //id поста. Если это так, то оставшиеся части образуют категорию поста.
        //Если нет, то часть отделенная / добавляется в пассив частей из которых складывается категория
        for(var i = CATEGORY_MAX_DEPTH + 1; i > 0; i--) {
            if(params[i]) {
                if(!isIdFounded && leJspath.isExist(data.source, params[i], TYPE, data.lang)) {
                    isIdFounded = true;
                    id = params[i];
                }else {
                    category = category || [];
                    category.push(params[i]);
                }
            }
        }

        //разворачиваем массив частей для категории поста в обратном порядке
        //и соединяем их по /
        category = category && category.reverse().join('/');

        var articlesQuery = null,
            predicate = null;

        if(category) {
            //пытаемся найти корневую статью для данной категории (библиотеки инструментов)
            if(!id){
                id = apply('findRootByCategory', this.ctx = { category: category, type: TYPE });
                predicate = '.' + data.lang + '{.type === $type}' +
                    '{.categories === $category || .categories.url === $category}';
            }else {
                predicate = '.' + data.lang + '{.type === $type}' + '{.categories === $category || .categories.url === $category}';
            }
            articlesQuery = {
                predicate: predicate,
                substitution: { type: TYPE, category: category }
            };
        }else {
            articlesQuery = {
                predicate: '.' + data.lang + '{.type === $type}',
                substitution: { type: TYPE }
            };
        }

        console.debug('category = %s id = %s', category, id);

        var categories = {
            block: 'center',
            mix: { block : 'layout', elem : 'col', mods: { type: 'center' } },
            content: [
                {
                   block: 'layout',
                    mods: { section: 'p-menu' },
                    content: [
                        {
                            block: 'g-posts-menu',
                            type: TYPE,
                            query: articlesQuery,
                            category: category,
                            id: id
                        },
                        id  ?
                                {
                                    block: 'g-post',
                                    id: id
                                }
                            :
                                {
                                    block: 'g-posts',
                                    query: articlesQuery
                                }
                    ]
                }
            ]
        };

        var rootPost = {
            block: 'center',
            mix: { block : 'layout', elem : 'col', mods: { type: 'center' } },
            content: apply('post', this.ctx.id = id)
        }

        return [
            {
                block: 'layout',
                mods: {section: 'p-menu'},
                content: [
                    {
                        block: 'g-categories-menu',
                        type: TYPE, //тип постов
                        id: category //текущая категория (нужен для правильного выделения активного пункта)
                    },
                    categories
                ]
            }
        ];
    }

    //метод для нахождения корневого поста для указанной категории category и типа type
    //возвращает id поста если тот найден или null в случае если пост отсутствует
    findRootByCategory: {
        var predicate = '.' + this.data.lang + '{.type === $type}' + '{.root === "true"}' +
            '{.categories === $category || .categories.url === $category}.id',
            substitution = { type: this.ctx.type, category: this.ctx.category },
            result = leJspath.find(predicate, this.data.source, substitution);

        return (result && result.length > 0) ? result.shift() : null;
    }
}
