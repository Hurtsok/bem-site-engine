block b-page {

    !leJspath.getSource(), default: {
        return this.doAsync(
                leDatasrc.loadData.bind(leDatasrc, {})
            )
            .then(
                function(result) {
                    leJspath.setSource(result); //кеширование данных
                    return applyNext();
                },
                function(err) {
                    return apply('error', this.ctx = err);
                },
                this
            );
    }

    leJspath.getSource(), default: {
        apply('route');
        this.ctx.mods = this._.extend({ theme : 'normal', page : this.data.page }, this.ctx.mods);
        return applyCtx(this.ctx);
    }

    route: {

        this.data._r = {
            'method':           function() { return apply('method') },
            'libs':             function() { return apply('libs') },
            'articles':         function() { return apply('articles') },
            'tools':            function() { return apply('tools') },
            'news':             function() { return apply('news') },
            'authors':          function() { return apply('authors') },
            'tags':             function() { return apply('tags') },
            'index':            function() { return apply('index') },
            'jobs':             function() { return apply('page') },
            'acknowledgement':  function() { return apply('page') },
            'error':            function() { return apply('error') }
        };
        return this.data._r[this.data.page].call(this);
    }

    method: {
        this.data._q = leLogic.getMethodology(this.data);
        return apply('createSEO');
    }

    libs: {
        this.data._q = leLogic.getLibraries(this.data);
        return apply('createSEO');
    }

    articles: {
        this.data._q = leLogic.getArticles(this.data);
        return apply('createSEO');
    }

    tools: {
        this.data._q = leLogic.getTools(this.data);
        return apply('createSEO');
    }

    news: {
        this.data._q = leLogic.getNews(this.data);
        return apply('createSEO');
    }

    authors: {
        var data = this.data,
            type = data.page,
            url = data.params.id,
            title = null,
            description = null;

        if(url){
            var source = leJspath.findByTypeAndUrl('authors', url, data.lang) ||
                         leJspath.findByTypeAndUrl('translators', url, data.lang);
            if(source) {
                title = source.firstName + ' ' + source.lastName;
                description = source.info;
            }else {
                description = title = BEM.I18N('main-menu', 'authors');
            }
        }else{
            description = title = BEM.I18N('main-menu', 'authors');
        }

        return apply('setTitleAndMeta', this.ctx = { title: title, description: description });
    }

    tags: {
        var data = this.data,
            url = data.params.id,
            title = null,
            description = null;

        description = title = url || BEM.I18N('main-menu', 'tags');

        return apply('setTitleAndMeta', this.ctx = { title: title, description: description });
    }

    index: {
        return apply('setTitleAndMeta', this.ctx = { title: BEM.I18N('main-menu', 'general') });
    }

    page: {
        var data = this.data,
            type = 'page',
            res = leJspath.findCategoryAndIdByUrl(data.req.path, type, data.lang);

        this.data._q = {
            type: type,
            id: res && res.id,
            category: res && res.category,
            query: {
                predicate: '.' + data.lang + '{.type === $type}',
                substitution: { type: type }
            }
        };

        leJspath.stringify(this.data._q);

        return apply('createSEO');
    }

    error: {
        return apply('setTitleAndMeta', this.ctx = { title: BEM.I18N('p-error', 'title') });
    }

    /**
     * Мода для определения заголовка страницы и мета-информации
     * При отображении конкретного поста заголовком страницы будет название этого поста
     * В мета-информацию попадет краткое содержание (summary) и теги (tags) поста
     * Применяется для страниц:
     * - method
     * - articles
     * - news
     * - tools
     * - libs
     */
    createSEO: {
        if(!this.data._q) return {};

        var _q = this.data._q,
            title = null,
            description = null,
            keywords = null;

        this.data._m = {};

        if(_q.type) {
            description = title = BEM.I18N('main-menu', _q.type);

            if(_q.id) {
                var source = leJspath.findByIdAndType(_q.id, _q.type, this.data.lang);
                if(source) {
                    title = source.title;
                    description = source.summary;
                    keywords = source.tags ? source.tags.join(', ') : ''
                }else {
                    description = title = BEM.I18N('main-menu', _q.type);
                }
            }
        }

        return apply('setTitleAndMeta', this.ctx = { title: title, description: description, keywords: keywords });

    }

    /**
     * Мода для задания заголовка страницы и мета-информации
     * Заголовок страницы хранится в поле pageTitle глобального объекта this.data
     * Вся мета-информация хранится в специальном объекте this.data._m
     */
    setTitleAndMeta: {
        this.data._m = {};

        this.data._m['ogType'] = 'article';
        this.data._m['ogUrl'] = 'http://' + this.data.req.headers.host + this.data.req.path;

        if(this.ctx.title) {
            this.data._m['ogTitle'] = this.data.pageTitle = this.ctx.title;
        }

        if(this.ctx.description) {
            this.data._m['ogDescription'] = this.data._m['description'] = this.ctx.description;
        }

        if(this.ctx.keywords) {
            this.data._m['keywords'] = this.data._m['ogKeywords'] = this.ctx.keywords;
        }
    }

    content: [
        { block : 'content' }
    ]

}
