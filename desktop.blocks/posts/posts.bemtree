 block posts {

    default: {
        return applyNext(
            this._datasrc = this.data.params);
    }

    content: {
        var data = this.data;

        return this.doAsync(
                leDatasrc.loadData.bind(leDatasrc, {})
            )
            .then(
                function(result) {
                    return
                        apply('processData',
                            this.ctx = {
                                data : data,
                                content : result
                            }
                        );
                },
                function(err) {
                    return apply('error', this.ctx = err);
                },
                this
            );
    }

    processData: {
        var DEFAULT_LIMIT = 10; //число записей на странице по умолчанию

        var content = this.ctx.content, //содержимое модели (файл data.json)
            data = this.ctx.data, //объект, хранящий всю информацию о request, response и.т.д.
            lang = data.params.lang || 'en', //локализация
            type = data.params.type || data.page; //тип загружаемых ресурсов

        //leJspath.stringify(data);

        content = apply('filter', this.ctx = {
            content : content,
            data : data
        });

        //сортировка данных
        content = leJspath.sort({
            content : content,
            data : data
        });

        //общее число записей, необходимо знать перед процедурой пагинации
        //для передачи в блок pager для правильной отрисовки набора ссылок на страницы
        var total = content.length;

        //постраничное разбиение набора записей
        content = leJspath.paginate({
            content : content,
            data : data,
            defaultLimit : DEFAULT_LIMIT
        });

        return [
            apply(
                this._mode = '',
                this.ctx = {
                    elem : 'list',
                    params: {
                        lang : lang,
                        type : type
                    },
                    content : content
                }
            ),
            apply(
                this._mode = '',
                this.ctx = {
                    elem : 'footer',
                    params : {
                        total : total,
                        path  : data.req.path,
                        query : data.req.query,
                        defaultLimit : DEFAULT_LIMIT
                    }
                }
            )
        ];
    }

    filter: {
        var content = this.ctx.content,
            data = this.ctx.data,
            lang = data.params.lang || 'en',
            type = data.params.type || data.page,
            query = data.req.query,
            filter = query.filter,
            config = [],
            predicate = '',
            substitution = {};

        config.push({ field: 'type', operand: '===', value: type });

        if(filter && filter.length > 0) {
            filter = filter.substring(1, filter.length - 1).split(', ');

            for(var i = 0; i < filter.length; i++) {
                var condition = filter[i].split(' ');
                config.push({
                    field : condition[0],
                    operand : condition[1],
                    value : condition[2]
                });
            }
        }

        predicate += '.' + lang;

        for(var i = 0; i < config.length; i++) {
            predicate += '{.' + config[i]['field'] + ' ' + config[i]['operand'] + ' $' + config[i]['field'] + '}';
            substitution[config[i]['field']] = config[i]['value'];
        }

        return leJspath.filter(predicate, content, substitution);
    }
}
